<?php
	trait site_produtos {
		function loja_produtos($queryby="@ID > -1",$required="quantidade_estoque_funcionarios > 0 || quantidade_estoque_barreiro > 0",$basics="ativo = true && naloja = true && venda = true"){
			return(parent::database()->query("produtos", "{$basics} && {$required} && {$queryby}"));
		}

		function page_json_produtos(){
			$retorno = [];
			foreach($this->loja_produtos(isset($_POST["prod"])?"id={$_POST["prod"]}":"@ID > -1") as $p){
				$fav_state = isset($this->sessao()->favs) ? $this->sessao()->favs:array();
				if(in_array($p["id"], $fav_state)){
					$key = array_search($p["id"], $fav_state);
					if($key !== false){
					    $fav_state = true;
					}
				}

				$fav_state = $fav_state === true ? "fas":"far";

				$retorno[] = array_merge($p, array(
					"id" => $p["id"],
					"nome" => $p["nome"],
					"cat" => (($cat=$this->get_cat($p["categoria"])) !== false ? (
						($subcat=$this->get_subcat($p["subcategoria"])) !== false
							? "{$cat} / {$subcat["txt"]}"
							: "{$cat}"
					) : ""),
					"img" => ($img=(isset($p["imagens"]) && isset($p["imagens"][0]))) ? $p["imagens"][0]["url"] : "img/products/product-grey-1.jpg",
					"imgt" => $img ? $p["imagens"][0]["legend"] : "",
					"link" => "/produtos/{$p["id"]}-" . $this->slug("{$cat} {$subcat["txt"]} {$p["nome"]}") . "/",
					"old_price" => ($promo=("{$p["valor-a-vista"]}"=="R$ 0,00")) ? "" : $p["valor"],
					"price" => $promo ? $p["valor"] : $p["valor-a-vista"],
					"fav" => $fav_state
				));
			}
			$this->json($retorno);
		}

		function get_cat($id=-1){
			$cats = parent::database()->query("produtos", "name = categorias",array("content"));
			$id = (int)$id;
			return (count($cats) > 0 ? ($id === -1 ? $cats[0]["content"] : (isset($cats[0]["content"][$id]) ? $cats[0]["content"][$id] : false)) : false);
		}

		function get_subcat($id=-1){
			$cats = parent::database()->query("produtos", "name = subcategorias",array("content"));
			$id = (int)$id;
			return (count($cats) > 0 ? ($id === -1 ? $cats[0]["content"] : (isset($cats[0]["content"][$id]) ? $cats[0]["content"][$id] : false)) : false);
		}

		function modelo_minhatura_produtos(UITemplate $content, $queryby="@ID > -1", $limit = 10, $style1 = "product mb-0", $init="", $end=""){
			$retorno = "";
			foreach((is_array($queryby) ? $queryby : $this->loja_produtos($queryby)) as $p){
				$fav_state = isset($this->sessao()->favs) ? $this->sessao()->favs:array();
				if(in_array($p["id"], $fav_state)){
					$key = array_search($p["id"], $fav_state);
					if($key !== false){
						$fav_state = true;
					}
				}

				$fav_state = $fav_state === true ? "fas":"far";
				if($limit < 1){break;}
				// $this->dbg($p);
				$retorno .= $content->loadModel("site/produto-minhatura", array(
					"id" => $p["id"],
					"nome" => $p["nome"],
					"cat" => (($cat=$this->get_cat($p["categoria"])) !== false ? (
						($subcat=$this->get_subcat($p["subcategoria"])) !== false
							? "{$cat} / {$subcat["txt"]}"
							: "{$cat}"
					) : ""),
					"queryCat" => "{$p["categoria"]}/{$p["subcategoria"]}",
					"img" => ($img=(isset($p["imagens"]) && isset($p["imagens"][0]))) ? $p["imagens"][0]["url"] : "img/products/product-grey-1.jpg",
					"imgt" => $img ? $p["imagens"][0]["legend"] : "",
					"link" => "/produtos/{$p["id"]}-" . $this->slug("{$cat} {$subcat["txt"]} {$p["nome"]}") . "/",
					"old_price" => ($promo=("{$p["valor-a-vista"]}"=="R$ 0,00"||empty("{$p["valor-a-vista"]}"))) ? "" : $p["valor"],
					"price" => $promo ? $p["valor"] : $p["valor-a-vista"],
					"fav" => $fav_state,
					"style1" => $style1,
					"init" => $init,
					"end" => $end
				));
				$limit--;
			}
			return $retorno;
		}

		function page_facebook_list(){
			$fba = parent::control("connect/facebookApi");
			$produtos = [];

			foreach($this->loja_produtos("@ID > -1", "@ID > -1") as $p){
				$p["descricao-curta"] = ($ns=substr(($p["descricao-curta"]=strip_tags($p["descricao-curta"])),0,100)) != $p["descricao-curta"]
					? $ns . "..."
					: $p["descricao-curta"];

				$produtos[] = array_merge($p, array(
					"id" => $p["id"],
					"nome" => $p["nome"],
					"cat" => (($cat=$this->get_cat($p["categoria"])) !== false ? (
						($subcat=$this->get_subcat($p["subcategoria"])) !== false
							? "{$cat} / {$subcat["txt"]}"
							: "{$cat}"
					) : ""),
					"img" => ($img=(isset($p["imagens"]) && isset($p["imagens"][0]))) ? $p["imagens"][0]["url"] : "img/products/product-grey-1.jpg",
					"link" => "{$this->mydomain}/produtos/{$p["id"]}-" . $this->slug("{$cat} {$subcat["txt"]} {$p["nome"]}") . "/",
					"price" => str_replace(",",".",(preg_replace("/[^0-9\,]/","",("{$p["valor-a-vista"]}"=="R$ 0,00") ? $p["valor"] : $p["valor-a-vista"]))) . " BRL",
					"gpc" => array($cat,$p["nome"],$subcat["txt"]),
					"stock" => $p["quantidade_estoque_funcionarios"] > 0 || $p["quantidade_estoque_barreiro"] > 0
						? "in stock"
						: "out of stock",
					"new" => "new"
				));
			}

			$fba->setData($produtos, array(
				"id" => "id",
				"title" => "nome",
				"description" => "descricao-curta",
				"availability" => "stock",
				"condition" => "new",
				"price" => "price",
				"link" => "link",
				"image_link" => "img",
				"brand" => "cat",
				"google_product_category" => "gpc"
			));

			$fba->render();
		}

		function page_produtos(UITemplate $content){
			$link = explode("-",$this->url(1));

			$error = !isset($link[0]) || preg_match("/[^0-9]/", $link[0]);

			if(!($error = $error || (count($query = $this->loja_produtos("id = {$link[0]}")) == 0))){
				$produto = $query[0];

				$p = $produto;

				$imgs = "";
				$imgs_thumbs = "";

				$fav_state = isset($this->sessao()->favs) ? $this->sessao()->favs:array();
				if(in_array($p["id"], $fav_state)){
					$key = array_search($p["id"], $fav_state);
					if($key !== false){
					    $fav_state = true;
					}
				}
				$fav_state = $fav_state === true ? "fas":"far";

				foreach($produto["imagens"] as $img){
					$imgs .=
						"<div>
							<img alt=\"{$img["legend"]}\" class=\"img-fluid\" src=\"{$img["url"]}\" />
						</div>";

					$imgs_thumbs .=
						"<div class=\"cur-pointer\">
							<img alt=\"{$img["legend"]}\" class=\"img-fluid\" src=\"{$img["url"]}\" />
						</div>";
				}

				$tags = implode("% or nome = %", explode(" ", $p["nome"]));

				$indicacoes = $this->modelo_minhatura_produtos($content, "categoria = {$p["categoria"]} or subcategoria = {$p["subcategoria"]} and nome = %{$tags}%", 30);

				if($indicacoes === ""){
					$indicacoes = $this->modelo_minhatura_produtos($content);
				}

				$dados = array_merge($p, array(
					"titulo" => $p["nome"],
					"cat" => (($cat=$this->get_cat($p["categoria"])) !== false ? (
						($subcat=$this->get_subcat($p["subcategoria"])) !== false
							? "{$cat} / {$subcat["txt"]}"
							: "{$cat}"
					) : ""),
					"imgs" => $imgs,
					"imgs_thumb" => $imgs_thumbs,
					"link" => "/produtos/{$p["id"]}-" . $this->slug("{$cat} {$subcat["txt"]} {$p["nome"]}") . "/",
					"old_price" => ($promo=("{$p["valor-a-vista"]}"=="R$ 0,00" || empty($p["valor-a-vista"])))
						? ""
						: $p["valor"],
					"price" => $promo ? $p["valor"]:$p["valor-a-vista"],
					"fav" => $fav_state,
					"indicacoes" => $indicacoes
				));

				$dados["TITLE"] = "{$p["nome"]} - {$dados["cat"]}";

				exit($this->simple_loader($content, "site/detalhes", $dados)->getCode());
			}

			if($error){
				$this->notfound($content);
			}

		}

		function page_fechar_pedido(UITemplate $content){
			$vars = ["enderecos" => "","TITLE" => "Fechar Pedido"];
			$enderecos = isset($this->sessao()->enderecos) ? $this->sessao()->enderecos:[];

			foreach($enderecos as $k=>$l){
				$vars["enderecos"] .= "<option value=\"{$k}\" data-apply='" . json_encode($l) . "'>Receber em {$l["rua"]}, {$l["numero"]} - {$l["bairro"]}</option>";
			}
			exit($this->simple_loader($content, "site/fechar-pedido", $vars)->getCode());
		}

		function page_pesquisa(UITemplate $content){
			$produtos = $this->loja_produtos();

			for($i = 0; $i < count($produtos); $i++){
				$produtos[$i]["query_for_search"] = (($cat=$this->get_cat($p["categoria"])) !== false ? (
					($subcat=$this->get_subcat($p["subcategoria"])) !== false
						? "{$cat} {$subcat["txt"]}"
						: "{$cat}"
				) : "") . " {$produtos[$i]["nome"]} {$produtos[$i]["descricao-curta"]}";
			}

			$produtos = parent::database()->query($produtos, "query_for_search = %{$_GET["q"]}%");

			// $this->dbg($produtos);

			$produtos = $this->modelo_minhatura_produtos($content, $produtos, 32, "product mb-0", '<div class="col-12 col-sm-6 col-lg-3 mb-5">','</div>');

			exit($this->simple_loader($content, "site/pesquisa", ["TITLE" => "Pesquisa", "termo" => $_GET["q"], "resultado" => $produtos])->getCode());
		}

		// function page_imports(){
		// 	if(isset($_GET) and count($_GET) > 0 and $_GET["password"] === "Auvfqf1!"){
		// 		unset($_GET["password"]);
		// 		parent::database()->setWhere("produtos", "id > 0", $_GET);
		// 		echo "Changes:\n\n\n";
		// 		$this->dbg($_GET);
		// 	}
		// 	header("Location: /");
		// 	exit("");
		// 	$prods = array();
		// 	foreach(parent::database()->query(unserialize(file_get_contents("lwdk/database/produtos.db")), "id > 0") as $prod){
		// 		$imagens = [];
		// 		foreach($prod["b64_imgs"] as $b64img){
		// 			$nome = md5($b64img);
		// 			$b64img = explode(",", file_get_contents("imgprod/b64/{$b64img}.b64"));
		// 			$type = @explode(";", (end(explode("/", $b64img[0]))));
		// 			$type = $type[0];
		// 			file_put_contents(($file="imgprod/{$nome}.{$type}"), base64_decode($b64img[1]));
		// 			$imagens[] = array("url" => $file, "legend" => "");
		// 		}
		//
		// 		$prods[] = array(
		// 			"codigo" => $prod["codbarra"],
		// 			"quantidade_estoque_funcionarios" => $prod["unqtd"][2],
		// 			"quantidade_estoque_barreiro" => $prod["unqtd"][5],
		// 			"id" => parent::database()->newID("produtos","tp = prod"),
		// 			"tp" => "prod",
		// 			"nome" => $prod["nome"],
		// 			"categoria" => 0,
		// 			"subcategoria" => 0,
		// 			"valor" => $prod["preco"],
		// 			"valor-a-vista" => "R$ 0,00",
		// 			"ativo" => "false",
		// 			"naloja" => "true",
		// 			"promocao" => "false",
		// 			"lancamento" => "false",
		// 			"venda" => "true",
		// 			"aluguel" => "false",
		// 			"imagens" => $imagens,
		// 			"descricao-curta" => "",
		// 			"descricao-longa" => ""
		// 		);
		// 	}
		// 	parent::database()->push("produtos",$prods);
		// }

		function _calcular_frete(
            $cep_origem,  /* cep de origem, apenas numeros */
            $cep_destino, /* cep de destino, apenas numeros */
            $valor_declarado='0', /* indicar 0 caso nao queira o valor declarado */
            $peso='1',        /* valor dado em Kg incluindo a embalagem. 0.1, 0.3, 1, 2 ,3 , 4 */
            $altura='15',      /* altura do produto em cm incluindo a embalagem */
            $largura='15',     /* altura do produto em cm incluindo a embalagem */
            $comprimento='15', /* comprimento do produto incluindo embalagem em cm */
            $cod_servico='pac' /* codigo do servico desejado */
            ){

            $cod_servico = strtoupper( $cod_servico );
            if( $cod_servico == 'SEDEX10' ) $cod_servico = 40215 ;
            if( $cod_servico == 'SEDEXACOBRAR' ) $cod_servico = 40045 ;
            if( $cod_servico == 'SEDEX' ) $cod_servico = 40010 ;
            if( $cod_servico == 'PAC' ) $cod_servico = 41106 ;

            # ###########################################
            # Código dos Principais Serviços dos Correios
            # 41106 PAC sem contrato
            # 40010 SEDEX sem contrato
            # 40045 SEDEX a Cobrar, sem contrato
            # 40215 SEDEX 10, sem contrato
            # ###########################################

            $correios = "http://ws.correios.com.br/calculador/CalcPrecoPrazo.aspx?nCdEmpresa=&sDsSenha=&sCepOrigem=".$cep_origem."&sCepDestino=".$cep_destino."&nVlPeso=".$peso."&nCdFormato=1&nVlComprimento=".$comprimento."&nVlAltura=".$altura."&nVlLargura=".$largura."&sCdMaoPropria=n&nVlValorDeclarado=".$valor_declarado."&sCdAvisoRecebimento=n&nCdServico=".$cod_servico."&nVlDiametro=0&StrRetorno=xml";

            // exit($correios);

            $xml = simplexml_load_file($correios);

            $_arr_ = array();
            if($xml->cServico->Erro == '0'):
                $_arr_['codigo'] = $xml -> cServico -> Codigo ;
                $_arr_['valor'] = $xml -> cServico -> Valor ;
                $_arr_['prazo'] = $xml -> cServico -> PrazoEntrega .' Dia(s)' ;
                // return $xml->cServico->Valor;
                return $_arr_ ;
            else:
                return false;
            endif;
        }

		function calcular_frete(){
            if(isset($_GET["consultaCEP"]) && $_GET["consultaCEP"] === "1"){
                foreach(array("largura","altura","comprimento") as $medida){
                    if((float)$_POST[$medida] < 15){
                        $_POST[$medida] = "15";
                    }
                }

                if((float)$_POST["peso"] < .3){
                    $_POST["peso"] = "0.3";
                }

                $this->type("application/json");

                //
                // exit(json_encode($_POST));

                exit(json_encode([$this->_calcular_frete(
                    $_POST["origem"],
                    $_POST["destino"],
                    $_POST["valor_declarado"],
                    $_POST["peso"],
                    $_POST["altura"],
                    $_POST["largura"],
                    $_POST["comprimento"],
                    "pac"
                ),$this->_calcular_frete(
                    $_POST["origem"],
                    $_POST["destino"],
                    $_POST["valor_declarado"],
                    $_POST["peso"],
                    $_POST["altura"],
                    $_POST["largura"],
                    $_POST["comprimento"],
                    "sedex"
                ),$this->_calcular_frete(
                    $_POST["origem"],
                    $_POST["destino"]
                )]));
            }
        }
	}
?>
